apiVersion: v1
data:
  cpu-usage.rules: |
    ALERT NodeCPUUsage
      IF (100 - (avg by (instance) (irate(node_cpu{name="node-exporter",mode="idle"}[5m])) * 100)) > 75
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: High CPU usage detected",
        DESCRIPTION = "{{$labels.instance}}: CPU usage is above 75% (current value is: {{ $value }})"
      }
  etcd-server.rules: |
    ALERT EtcdServerIsUp
      IF (probe_success !=1 AND probe_success{instance=~".*etcd.*"})
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: etcd server probe failed",
        DESCRIPTION = "{{$labels.instance}}: etcd server probe failed for {{$labels.job}}"
      }

    ALERT EtcdServerHasLeader
      IF (etcd_server_has_leader != 1)
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{labels.instance}}: etcd server has no leader",
        DESCRIPTION = "{{$labels.instance}}: etcd cluster node has no leader"
      }
  kubernetes-pods.rules: |
    ALERT KubeDeploymentStatusReplicasUnavailable
      IF (kube_deployment_status_replicas_unavailable != 0)
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.deployment}}: deployment has replicas unavailable",
        DESCRIPTION = "{{$labels.deployment}}: deployment has {{$value}} replicas unavailable"
      }
  kubernetes-nodes.rules: |
    ALERT KubeNodesNotReady
      IF ((kube_node_status_ready{condition="false"})>0 OR (kube_node_status_ready{condition="unknown"})>0)
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.node}}: is not ready or in unknown state",
        DESCRIPTION = "{{$labels.node}}: condition {{$labels.condition}}"
      }
  load-average.rules: |
    ALERT NodeLoadAverage
      IF ((node_load5 / count without (cpu, mode) (node_cpu{mode="system"})) > 3)
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: High LA detected",
        DESCRIPTION = "{{$labels.instance}}: 5 minute load average is {{$value}}"
      }
  low-disk-space.rules: |
    ALERT NodeLowRootDisk
      IF ((node_filesystem_size{mountpoint="/root-disk"} - node_filesystem_free{mountpoint="/root-disk"} ) / node_filesystem_size{mountpoint="/root-disk"} * 100) > 75
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Low root disk space",
        DESCRIPTION = "{{$labels.instance}}: Root disk usage is above 75% (current value is: {{ $value }})"
      }

    ALERT NodeLowDataDisk
      IF ((node_filesystem_size{mountpoint="/data-disk"} - node_filesystem_free{mountpoint="/data-disk"} ) / node_filesystem_size{mountpoint="/data-disk"} * 100) > 75
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Low data disk space",
        DESCRIPTION = "{{$labels.instance}}: Data disk usage is above 75% (current value is: {{ $value }})"
      }
  mem-usage.rules: |
    ALERT NodeSwapUsage
      IF (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100) > 75
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Swap usage detected",
        DESCRIPTION = "{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})"
      }

    ALERT NodeMemoryUsage
      IF (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached)/(node_memory_MemTotal)*100)) > 75
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: High memory usage detected",
        DESCRIPTION = "{{$labels.instance}}: Memory usage is above 75% (current value is: {{ $value }})"
      }
  scrape.rules: |
    ALERT ScrapeEndpointUp
      IF (up == 0 AND up {job != "kubernetes-apiservers"})
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Scrape target is down",
        DESCRIPTION = "{{$labels.instance}}: Target down for job {{$labels.job}}"
      }

    ALERT ContainerScrapeError
      IF (container_scrape_error) != 0
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Container scrape error",
        DESCRIPTION = "{{$labels.instance}}: Failed to scrape container, metrics will not be updated"
      }
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: <%= @prometheus_namespace %>
