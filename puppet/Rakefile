require 'puppetlabs_spec_helper/rake_tasks'
require 'puppet-lint/tasks/puppet-lint'
require 'metadata-json-lint/rake_task'
require 'base64'

# external modules
external_modules = ['stdlib', 'archive', 'concat', 'site_module', 'airworthy']

desc 'publish all modules to puppet forge'
task :publish_modules do
  # make sure tarmak version is set
  tarmak_version = ENV['CI_COMMIT_TAG']
  fail "make sure a version is specified using CI_COMMIT_TAG" if tarmak_version.nil?

  # copy modules to release folder
  sh 'rm -rf .release'
  sh 'mkdir .release'
  sh 'git archive HEAD . | tar x -C ./.release'


  Dir[".release/modules/*"].reject do |o|
    # filter non directories
    not File.directory?(o)

    # fitler external modules
    external_modules.include? File.basename(o)
  end.each do |module_path|

    # run in modules directory
    Dir.chdir(module_path) do
      module_name = File.basename(module_path)
      puts "preparing module #{module_name}"

      # read fixture dependencies
      begin
        fixtures = YAML.load_file(".fixtures.yml")['fixtures']['symlinks'] || YAML.load_file(".fixtures.yml")['fixtures']['forge_modules'] || YAML.load_file(".fixtures.yml")['fixtures']['repositories']
        fixtures = fixtures.keys.reject do |m|
          # filter external modules or myself
          external_modules.include? m or module_name == m
        end
      rescue Errno::ENOENT
        fixtures = []
      end

      # modify metadata accordingly
      metadata = JSON.parse(File.read("metadata.json"))
      metadata['name'] = "jetstack-#{module_name}"
      metadata['project_page'] = "https://docs.tarmak.io"
      metadata['license'] = "Apache-2.0"
      metadata['source'] = "https://github.com/jetstack/tarmak/tree/master/puppet/modules/#{module_name}"
      metadata['issues_url'] = "https://github.com/jetstack/tarmak/issues/new"
      metadata['author'] = 'jetstack'
      metadata['version'] = tarmak_version

      # add dependencies
      fixtures.each do |m|
        metadata['dependencies'] << {'name':"jetstack-#{m}", 'version_requirement':tarmak_version}
      end

      # write back json
      File.write('metadata.json', JSON.pretty_generate(metadata))

      # copy Rakefile (no symlinks are allowed to be in the puppet module)
      sh 'rm -rf Rakefile'
      sh 'cp ../../Rakefile.module Rakefile'

      # push to puppet forge
      Open3.popen3('bundle', 'exec', 'rake', 'module:push') do |stdin, stdout, stderr, wait_thr|
        stdin.close
        captured_stdout = stdout.read
        captured_stderr = stderr.read
        if not wait_thr.value.success?
          if captured_stderr.include? 'A release with the version specified in the metadata.json already exists for this module.'
            puts "warning: module version #{module_name}/#{tarmak_version} is already existing, did not overwrite the release"
          else
            fail captured_stderr
          end
        end
      end
    end
  end
end
