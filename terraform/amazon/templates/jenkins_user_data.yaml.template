#cloud-config
repo_update: true
repo_upgrade: all

preserve_hostname: true

write_files:
- path: /etc/hosts
  permissions: '0644'
  content: |
    127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
    ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
    127.0.1.1   ${fqdn}
- path: /etc/systemd/system/attach-ebs-volume.service
  permissions: '0644'
  content: |
    [Unit]
    Description=Attach EBS volume if needed

    [Service]
    Type=oneshot
    RemainAfterExit=yes
    ExecStart=/bin/bash -c ' \
      test -e /dev/xvdd && exit 0; \
      aws ec2 attach-volume --region ${region} --volume-id ${volume_id} --instance-id $(curl -sL http://169.254.169.254/latest/meta-data/instance-id) --device /dev/xvdd \
    '
    ExecStart=/bin/bash -c ' \
      until test -e /dev/xvdd; do \
        echo "Waiting for device /dev/xvdd ..."; \
        sleep 1; \
      done \
    '
    ExecStop=/bin/bash -c ' \
      test -e /dev/xvdd || exit 0 \
      aws ec2 detach-volume --region ${region} --volume-id ${volume_id} --instance-id $(curl -sl http://169.254.169.254/latest/meta-data/instance-id) \
    '
- path: /etc/systemd/system/ensure-ebs-volume-formatted.service
  permissions: '0644'
  content: |
    [Unit]
    Description=Format EBS volume if needed
    After=attach-ebs-volume.service
    Requires=attach-ebs-volume.service

    [Service]
    Type=oneshot
    RemainAfterExit=yes
    ExecStart=/bin/bash -c 'blkid /dev/xvdd || (wipefs -fa /dev/xvdd && mkfs.ext4 /dev/xvdd)'

    [Install]
    WantedBy=multi-user.target

- path: /etc/systemd/system/var-lib-jenkins.mount
  permissions: '0644'
  content: |
    [Unit]
    Description=Mount jenkins data
    After=ensure-ebs-volume-formatted.service
    Requires=ensure-ebs-volume-formatted.service

    [Mount]
    What=/dev/xvdd
    Where=/var/lib/jenkins
    Type=ext4

    [Install]
    WantedBy=multi-user.target

- path: /etc/systemd/system/jenkins.service
  permissions: '0644'
  content: |
    [Unit]
    Description=Jenkins
    After=var-lib-jenkins.mount
    Requires=var-lib-jenkins.mount
    After=docker.service
    Requires=docker.service

    [Service]
    TimeoutStartSec=0
    ExecStartPre=-/usr/bin/docker kill jenkins
    ExecStartPre=-/usr/bin/docker rm jenkins
    ExecStartPre=/usr/bin/docker pull dippynark/jenkins
    ExecStartPre=/usr/bin/mkdir -p /var/lib/jenkins
    ExecStartPre=/usr/bin/chown -R 1000:1000 /var/lib/jenkins
    ExecStartPre=/bin/mount --make-shared /var/lib/jenkins
    ExecStartPre=/bin/chcon -Rt svirt_sandbox_file_t /var/lib/jenkins
    ExecStart=/usr/bin/docker run --name jenkins --privileged \
      -p 8080:8080 \
      -p 50000:50000 \
      -e JENKINS_HOME=/var/lib/jenkins \
      -v /var/lib/jenkins:/var/lib/jenkins:shared \
      -v /var/run/docker.sock:/var/run/docker.sock \
      dippynark/jenkins
    ExecStop=/usr/bin/docker stop jenkins
    Restart=always
    RestartSec=10

    [Install]
    WantedBy=multi-user.target
- path: /etc/systemd/system/docker.service.d/mount-flags-shared.conf
  permissions: '0644'
  content: |
    [Service]
    MountFlags=shared

- path: /etc/systemd/system/wing-tag.service
  permissions: '0644'
  content: |
    [Unit]
    Description=Tag Jenkins instance with public keys
    After=network.target

    [Service]
    PermissionsStartOnly=true
    Restart=on-failure
    RestartSec=10
    Environment=WING_CLOUD_PROVIDER=amazon
{{- if .WingDevMode }}
    Environment=WING_VERSION="${wing_version}"
    ExecStartPre=/bin/sh -c 'aws s3 cp "s3://${wing_binary_path}" /opt/wing-$${WING_VERSION}/wing; chmod 0755 /opt/wing-$${WING_VERSION}/wing'
{{- else }}
    Environment=AIRWORTHY_VERSION=0.2.0
    Environment=AIRWORTHY_HASH=2d69cfe0b92f86481805c28d0b8ae47a8ffa6bb2373217e7c5215d61fc9efa1d
    Environment=WING_VERSION=0.5.3
    ExecStartPre=/bin/sh -c '\
      set -e ;\
      test -x /opt/wing-$${WING_VERSION}/wing && exit 0 ;\
      if [ ! -x /opt/airworthy-$${AIRWORTHY_VERSION}/airworthy ]; then \
        mkdir -p /opt/airworthy-$${AIRWORTHY_VERSION} ;\
        curl -sLo /opt/airworthy-$${AIRWORTHY_VERSION}/airworthy https://github.com/jetstack/airworthy/releases/download/$${AIRWORTHY_VERSION}/airworthy_$${AIRWORTHY_VERSION}_linux_amd64 ;\
        echo "$${AIRWORTHY_HASH}  /opt/airworthy-$${AIRWORTHY_VERSION}/airworthy" | sha256sum -c ;\
        chmod 755 /opt/airworthy-$${AIRWORTHY_VERSION}/airworthy ;\
      fi ;\
      /opt/airworthy-$${AIRWORTHY_VERSION}/airworthy download --output /opt/wing-$${WING_VERSION}/wing --sha256sums https://github.com/jetstack/tarmak/releases/download/$${WING_VERSION}/tarmak_$${WING_VERSION}_checksums.txt  --signature-armored https://github.com/jetstack/tarmak/releases/download/$${WING_VERSION}/tarmak_$${WING_VERSION}_checksums.txt.asc https://github.com/jetstack/tarmak/releases/download/$${WING_VERSION}/wing_$${WING_VERSION}_linux_amd64'
 {{- end }}
    ExecStart=/bin/sh -c 'exec /opt/wing-$${WING_VERSION}/wing tag'
    Type=notify

    [Install]
    WantedBy=multi-user.target

runcmd:
- hostnamectl set-hostname "${fqdn}"
- yum -y update
- yum -y install vim docker
- useradd --system jenkins
- systemctl enable format-jenkins-home.service var-jenkins_home.mount jenkins.service wing-tag.service
- systemctl start format-jenkins-home.service var-jenkins_home.mount jenkins.service wing-tag.service

output : { all : '| tee -a /var/log/cloud-init-output.log' }
